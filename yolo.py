# -*- coding: utf-8 -*-
"""Yolo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fI4b3SC7Xn6Wm18KBvBOIgqjF521Q4y
"""

# @title Bagian 1: Persiapan dan Instalasi Dependensi
# Pastikan Anda menggunakan GPU untuk performa terbaik.
# Pergi ke Runtime > Change runtime type, dan pilih 'GPU' sebagai Hardware accelerator.

!pip install ultralytics opencv-python-headless
print("Instalasi dependensi selesai.")

from ultralytics import YOLO
from google.colab import files
import glob
from IPython.display import Video
import cv2
import glob
from google.colab.patches import cv2_imshow # Import cv2_imshow

# 1. Unggah File Video
print("Silakan unggah file video Anda:")
uploaded = files.upload()

# Dapatkan nama file yang diunggah
# Asumsi Anda mengunggah hanya satu file pada satu waktu
if uploaded:
    video_filename = list(uploaded.keys())[0]
    print(f"File video '{video_filename}' berhasil diunggah.")
else:
    print("Tidak ada file yang diunggah. Harap unggah file video.")
    exit() # Keluar jika tidak ada file yang diunggah

# Muat model YOLOv8
model = YOLO('yolov8n.pt')

# Lakukan deteksi objek pada video
# Menggunakan 'video_filename' yang didapat dari proses unggah
print(f"Memulai deteksi objek pada video: {video_filename}")
results = model.predict(source=video_filename, save=True, conf=0.5, iou=0.7)
print("Deteksi objek selesai.")

output_dirs = sorted(glob.glob('runs/detect/predict*'))
if output_dirs:
    latest_output_dir = output_dirs[-1]
    output_video_paths = glob.glob(f'{latest_output_dir}/*.avi')
    if output_video_paths:
        output_video_path = output_video_paths[0]
        print(f"Mencoba memutar video frame-by-frame dari: {output_video_path}")

        cap = cv2.VideoCapture(output_video_path)

        if not cap.isOpened():
            print("Error: Tidak dapat membuka video. Jalur mungkin salah atau video rusak.")
        else:
            # Dapatkan informasi video
            frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            fps = cap.get(cv2.CAP_PROP_FPS)
            total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

            print(f"Video Info: {frame_width}x{frame_height} @ {fps:.2f} FPS, {total_frames} frames")

            frame_count = 0
            try:
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break # End of video

                    # Tampilkan frame menggunakan cv2_imshow
                    cv2_imshow(frame)

                    # Optional: Untuk mengontrol kecepatan, tambahkan delay
                    # cv2.waitKey(int(1000 / fps)) # Delay dalam milidetik

                    # Penting: Jika Anda memutar seluruh video, outputnya bisa sangat panjang.
                    # Pertimbangkan untuk memutar hanya beberapa frame pertama untuk pengujian.
                    frame_count += 1
                    if frame_count > 50: # Batasi hanya 50 frame pertama
                        print("Menampilkan 50 frame pertama saja. Hapus baris ini untuk memutar semua.")
                        break

            except Exception as e:
                print(f"Terjadi error saat membaca/menampilkan frame: {e}")
            finally:
                cap.release()
                print("Pemutaran frame selesai.")
    else:
        print("Tidak ditemukan video MP4 di folder deteksi.")
else:
    print("Tidak ditemukan folder deteksi 'runs/detect/predict*'.")